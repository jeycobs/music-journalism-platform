'''
PAGES = {
    "–ì–ª–∞–≤–Ω–∞—è" : home_page,
    "–ù–æ–≤–æ—Å—Ç–∏" : news_page,
    "–†–µ—Ü–µ–Ω–∑–∏–∏" : reviews_page,
    "–ñ–∞–Ω—Ä–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞" : genres_page
}

st.title("üéµ  music project") 

selected_page = st.selectbox("–Ω–∞–≤–∏–≥–∞—Ü–∏—è", PAGES.keys())
PAGES[selected_page]()
'''

custom_css = """
<style>
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤–∫–ª–∞–¥–æ–∫ */
    .stTabs [role="tablist"] {
        display: flex;
        justify-content: space-around;
        background-color: #1f77b4; /* –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≤–∫–ª–∞–¥–æ–∫ */
        padding: 0.5rem;
        border-radius: 0.5rem;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏ */
    .stTabs [role="tab"] {
        color: white;
        font-size: 16px;
        font-weight: bold;
        padding: 10px 20px;
        margin: 0 5px;
        cursor: pointer;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ */
    .stTabs [role="tab"][aria-selected="true"] {
        background-color: #ff7f0e; /* –¶–≤–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ */
        border-radius: 5px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏ */
    .stTabs [role="tabpanel"] {
        background-color: #f5f5f5; /* –§–æ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
        padding: 20px;
        border-radius: 0 0 0.5rem 0.5rem;
        min-height: 300px; /* –í—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
    }
</style>
"""


_________________________________
#–∑–∞–ø—É—Å–∫
import streamlit as st
from interface.pages.home import home_page
from interface.pages.news import news_page
from interface.pages.genres import genres_page
from interface.pages.reviews import reviews_page
from interface.pages.account import account_page
import psycopg2
from psycopg2.extras import RealDictCursor
import pandas as pd
import bcrypt

#–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DB_CONFIG = {
    "dbname": "musicdb",
    "user": "admin",
    "password": "test",
    "host": "localhost",
    "port": "5432",
}
DB_HOST = "localhost"
DB_NAME = "musicdb"
DB_USER = "admin"
DB_PASSWORD = "test"

def get_data(query):
    try:
        with psycopg2.connect(**DB_CONFIG) as connection:
            return pd.read_sql_query(query, connection)
    except Exception as e:
        st.error(f'–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}')
        return pd.DataFrame()
st.set_page_config(
    page_title = "music project",
    page_icon = "üéµ",
    layout = "wide"
)

custom_css = """
<style>
    /* –§–æ–Ω –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ */
    .stApp{
        background-color: #e4e7ed;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤–∫–ª–∞–¥–æ–∫ */
    .stTabs [role="tablist"] {
        display: flex;
        justify-content: space-around;
        background-color: #0e466e; /* –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≤–∫–ª–∞–¥–æ–∫ */
        padding: 0.5rem;
        border-radius: 0.5rem;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏ */
    .stTabs [role="tab"] {
        color: white;
        font-size: 16px;
        font-weight: bold;
        padding: 10px 20px;
        margin: 0 5px;
        cursor: pointer;
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ */
    .stTabs [role="tab"][aria-selected="true"] {
        background-color: #0d6eff; /* –¶–≤–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ */
        border-radius: 5px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
    }

    /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏ */
    .stTabs [role="tabpanel"] {
        background-color: #6c6b70; /* –§–æ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
        padding: 20px;
        border-radius: 0 0 0.5rem 0.5rem;
        min-height: 300px; /* –í—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
    }
    
    [data-testid="stSidebar"] {
        display: none;
    }
</style>
"""

st.markdown(custom_css, unsafe_allow_html=True)

def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = psycopg2.connect(
            host=DB_HOST,
            database=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD
        )
        return conn
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None
    
def create_user(username, password):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(
                    "INSERT INTO users (username, password_hash) VALUES (%s, %s)",
                    (username, hashed_password.decode('utf-8'))
                )
                conn.commit()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        finally:
            conn.close()

def authenticate_user(username, password):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute(
                    "SELECT * FROM users WHERE username = %s",
                    (username,)
                )
                user = cur.fetchone()
                if user and bcrypt.checkpw(password.encode('utf-8'), user['password_hash'].encode('utf-8')):
                    return user
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        finally:
            conn.close()
    return None


if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False
    st.session_state.username = None
tabs = st.tabs(['–ì–ª–∞–≤–Ω–∞—è', '–ù–æ–≤–æ—Å—Ç–∏', '–†–µ—Ü–µ–Ω–∑–∏–∏', '–ñ–∞–Ω—Ä–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–ê–∫–∫–∞—É–Ω—Ç'])
with tabs[0]:
    home_page()

with tabs[1]:
    news_page()

with tabs[2]:
    genres_page()

with tabs[3]:
    reviews_page()

with tabs[4]:
    if st.session_state.authenticated:
        st.success(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {st.session_state.username}")
        if st.button("–í—ã–π—Ç–∏"):
            st.session_state.authenticated = False
            st.session_state.username = None
            st.experimental_rerun()
    else:
        auth_tabs = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])

            # –í–∫–ª–∞–¥–∫–∞ "–í—Ö–æ–¥"
        with auth_tabs[0]:
            st.subheader("–í—Ö–æ–¥")
            username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="login_username")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_password")
            if st.button("–í–æ–π—Ç–∏"):
                user = authenticate_user(username, password)
                if user:
                    st.session_state.authenticated = True
                    st.session_state.username = user['username']
                    st.experimental_rerun()
                else:
                    st.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")

            # –í–∫–ª–∞–¥–∫–∞ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        with auth_tabs[1]:
            st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
            new_username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="register_username")
            new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="register_password")
            confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password", key="register_confirm_password")
            if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
                if new_password == confirm_password:
                    try:
                        create_user(new_username, new_password)
                        st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
                else:
                    st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")

 '''
        if st.button("–°–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤"):
            with st.form(key="review_form"):
                album_list = get_albums()
                album_options = {album['title']: album['album_id'] for album in album_list}

                album_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å–±–æ–º", options=list(album_options.keys()))
                rating = st.slider("–†–µ–π—Ç–∏–Ω–≥", 1, 10, 5)
                review_text = st.text_area("–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞")

                submit_button = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
                if submit_button:
                    print("ETOOOOO submit button")
                    create_review(
                        user_id=st.session_state.user_id,
                        album_id=album_options[album_name],
                        rating=rating,
                        review_text=review_text
                    )
            '''
_______________WRITE_ARICLE —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫–æ–¥____________
import streamlit as st
import datetime
def news_page():
    '''
    —Ç—É—Ç –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç —Å—Ç–∞—Ç–µ–π –∏–∑ –±–¥
    '''
    st.write('–ø–æ–∫–∞ —Å—Ç–∞—Ç–µ–π –Ω–µ—Ç')
    st.header("–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
    
 

import psycopg2
from psycopg2.extras import RealDictCursor

def get_albums():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–ª—å–±–æ–º–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                cur.execute("SELECT album_id, title FROM albums")
                return cur.fetchall()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª—å–±–æ–º–æ–≤: {e}")
        finally:
            conn.close()
    return []

def add_review_to_db(user_id, album_id, rating, review_text):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –≤ —Ç–∞–±–ª–∏—Ü—É reviews."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(
                    """
                    INSERT INTO reviews (user_id, album_id, rating, review_text)
                    VALUES (%s, %s, %s, %s)
                    """,
                    (user_id, album_id, rating, review_text)
                )
                conn.commit()
                st.success("–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
        finally:
            conn.close()

def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    try:
        return psycopg2.connect(
            host="localhost",
            database="musicdb",
            user="admin",
            password="test"
        )
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def review_page():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞."""
    if 'user_id' not in st.session_state or st.session_state.user_id is None:
        st.warning("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞.")
        st.session_state.update({"rerun": True}) 

    st.header("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–ª—å–±–æ–º–æ–≤
    album_list = get_albums()
    if not album_list:
        st.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return

    album_options = {album['title']: album['album_id'] for album in album_list}

    with st.form(key="review_form"):
        album_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å–±–æ–º", options=list(album_options.keys()))
        rating = st.slider("–†–µ–π—Ç–∏–Ω–≥", 1, 10, 5)
        review_text = st.text_area("–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞")

        submit_button = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        if submit_button:
            if not review_text.strip():
                st.error("–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            else:
                add_review_to_db(
                    user_id=st.session_state.user_id,
                    album_id=album_options[album_name],
                    rating=rating,
                    review_text=review_text
                )
        



_________________________________–†–ê–ë–û–ß–ò–ô –ö–û–î –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ê–õ–¨–ë–û–ú–ê___________________
import streamlit as st
import psycopg2
from psycopg2.extras import RealDictCursor

DB_CONFIG = {
    "dbname": "musicdb",
    "user": "admin",
    "password": "test",
    "host": "localhost",
    "port": "5432",
}

def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        return conn
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def add_genre_if_not_exists(genre_name):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∂–∞–Ω—Ä, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute("SELECT genre_id FROM genres WHERE name = %s", (genre_name,))
                genre = cur.fetchone()
                if not genre:
                    cur.execute("INSERT INTO genres (name) VALUES (%s) RETURNING genre_id", (genre_name,))
                    conn.commit()
                    genre = cur.fetchone()
                return genre[0]
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–∞–Ω—Ä–∞: {e}")
        finally:
            conn.close()

def add_artist_if_not_exists(artist_name, country, genre_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä—Ç–∏—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute("SELECT artist_id FROM artists WHERE name = %s", (artist_name,))
                artist = cur.fetchone()
                if not artist:
                    cur.execute(
                        "INSERT INTO artists (name, country, genre_id) VALUES (%s, %s, %s) RETURNING artist_id",
                        (artist_name, country, genre_id)
                    )
                    conn.commit()
                    artist = cur.fetchone()
                return artist[0]
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–∞: {e}")
        finally:
            conn.close()

def add_album(title, artist_id, genre_id, release_date, sales):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–ª—å–±–æ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = get_db_connection()
    if conn:
        try:
            with conn.cursor() as cur:
                cur.execute(
                    """
                    INSERT INTO albums (title, artist_id, genre_id, release_date, sales)
                    VALUES (%s, %s, %s, %s, %s) RETURNING album_id
                    """,
                    (title, artist_id, genre_id, release_date, sales)
                )
                conn.commit()
                album = cur.fetchone()
                st.success(f"–ê–ª—å–±–æ–º '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                return album[0]
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞: {e}")
        finally:
            conn.close()

# Streamlit UI
def review_page():
    st.title("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª—å–±–æ–º–∞")

    if 'authenticated' in st.session_state and st.session_state['authenticated']:
        with st.form("add_album_form"):
            album_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞")
            artist_name = st.text_input("–ò–º—è –∞—Ä—Ç–∏—Å—Ç–∞")
            artist_country = st.text_input("–°—Ç—Ä–∞–Ω–∞ –∞—Ä—Ç–∏—Å—Ç–∞", value="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            genre_name = st.text_input("–ñ–∞–Ω—Ä")
            release_date = st.date_input("–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞ –∞–ª—å–±–æ–º–∞")
            sales = st.number_input("–ü—Ä–æ–¥–∞–∂–∏ (–≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö)", min_value=0, step=1)
            image_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–æ–∂–∫—É –∞–ª—å–±–æ–º–∞", type=["jpg", "jpeg", "png"])
        
            submit = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∞–ª—å–±–æ–º")
        
            if submit:
                if not album_title or not artist_name or not genre_name:
                    st.error("–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
                else:
                    try:
                        genre_id = add_genre_if_not_exists(genre_name)
                        artist_id = add_artist_if_not_exists(artist_name, artist_country, genre_id)
                        album_id = add_album(album_title, artist_id, genre_id, release_date, sales)
                    
                        if image_file and album_id:
                            add_album_cover(album_id, image_file)

                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞: {e}")
    else:
        st.error("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
